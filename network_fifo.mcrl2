map SplitBroadcastedMessages: Pid # List(Pid) # MessageData -> List(Message);
var v_sender: Pid;
   v_receivers: List(Pid);
    v_message: MessageData;
eqn SplitBroadcastedMessages(v_sender, v_receivers, v_message) =
    SplitBroadcastedMessagesHelper(v_sender, v_receivers, v_message, []);
map SplitBroadcastedMessagesHelper: Pid # List(Pid) # MessageData # List(Message) -> List(Message);
var v_sender: Pid;
    v_receivers: List(Pid);
    v_message: MessageData;
    v_msgs: List(Message);
eqn ((# v_receivers) == 0) -> SplitBroadcastedMessagesHelper(v_sender, v_receivers, v_message, v_msgs) = v_msgs;
    ((# v_receivers) > 0)  -> SplitBroadcastedMessagesHelper(v_sender, v_receivers, v_message, v_msgs) =
                     SplitBroadcastedMessagesHelper(v_sender, tail(v_receivers), v_message, v_msgs
                     <| Message(v_sender, head(v_receivers), v_message) );

                    
Network(msgs: List(Message)) =
  (sum sender : Pid, msg: MessageData . ((# msgs) < NETWORK_LIMIT) -> (
    (sum receiver : Pid .
      networkReceiveMessage(sender, receiver, msg) .
      Network(msgs = msgs <| Message(sender, receiver, msg))
    )
    +
    (sum receivers: List(Pid) .
      networkBroadcastMessages(sender, receivers, msg) .
      Network(msgs = msgs ++ SplitBroadcastedMessages(sender, receivers, msg)))
   ))
   +
    ((# msgs) > 0) -> ((networkSendMessage(receiverID(head(msgs)), senderID(head(msgs)), message(head(msgs)))
      + ((LOSSY_NETWORK) -> lose)
    ) . Network(msgs = tail(msgs)))
   + ((# msgs) == 0) -> (emptyNetwork . Network());