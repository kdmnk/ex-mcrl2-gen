sort Pid = Nat;
sort MessageData = struct MessageData(t: Nat, data: Nat);
sort Message = struct Message(senderID: Pid, receiverID: Pid, message: MessageData);

map LOSSY_NETWORK : Bool;
eqn LOSSY_NETWORK = false;

map ALLOW_CRASH : Bool;
eqn ALLOW_CRASH = true;

map NETWORK_LIMIT : Nat;
eqn NETWORK_LIMIT = 20;

map MakeMessage: Nat # Nat -> MessageData;
var _t: Nat; _data: Nat;
eqn MakeMessage(_t, _data) = MessageData(_t, _data);

map Candidate_PID : List(Pid);
eqn Candidate_PID = [1001, 1002, 1003, 1004, 1005];


map SplitBroadcastedMessages: Pid # List(Pid) # MessageData -> FSet(Message);
var v_sender: Pid;
   v_receivers: List(Pid);
    v_message: MessageData;
eqn SplitBroadcastedMessages(v_sender, v_receivers, v_message) =
    SplitBroadcastedMessagesHelper(v_sender, v_receivers, v_message, {});
map SplitBroadcastedMessagesHelper: Pid # List(Pid) # MessageData # FSet(Message) -> FSet(Message);
var v_sender: Pid;
    v_receivers: List(Pid);
    v_message: MessageData;
    v_msgs: FSet(Message);
eqn ((# v_receivers) == 0) -> SplitBroadcastedMessagesHelper(v_sender, v_receivers, v_message, v_msgs) = v_msgs;
    ((# v_receivers) > 0)  -> SplitBroadcastedMessagesHelper(v_sender, v_receivers, v_message, v_msgs) =
                     SplitBroadcastedMessagesHelper(v_sender, tail(v_receivers), v_message, v_msgs
                     + {Message(v_sender, head(v_receivers), v_message)} );


act
  sendMessage, receiveMessage, networkReceiveMessage, networkSendMessage, outgoingMessage, incomingMessage: Pid # Pid # MessageData;
  broadcastMessages, networkBroadcastMessages, broadcast: Pid # List(Pid) # MessageData;
  lose, done, emptyNetwork, protocolDone;
  resume, crash, timeout: Pid;
  exposeLeader : Nat # Nat;
proc
  Candidate(pid: Pid, others: List(Pid)) = 
    Candidateidle(pid, others, 0)
  ;
  Candidatecandidate_wait_ack(pid: Pid, others: List(Pid), term: Nat, remaining_good: Int, allowed_bad: Int) = 
    (sum some_user : Pid . sum m : MessageData . (
      (t((m)) < term) -> (receiveMessage(pid, some_user, m) . 
        Candidatecandidate_wait_ack(pid, others, term, remaining_good, allowed_bad)
      )
    ))
    +
    (sum some_user : Pid . sum m : MessageData . (
      ((data((m)) == 1 && t((m)) == term)) -> (receiveMessage(pid, some_user, m) . 
        ((remaining_good > 1) -> (
          Candidatecandidate_wait_ack(pid, others, term, remaining_good - 1, allowed_bad)
        ) <> (
          broadcastMessages(pid, others, MakeMessage(term, 5))
          .
          exposeLeader(pid, (term))
          .
          Candidateleader(pid, others, term)
        ))
      )
    ))
    +
    (sum some_user : Pid . sum m : MessageData . (
      ((data((m)) == 2 && t((m)) == term)) -> (receiveMessage(pid, some_user, m) . 
        ((allowed_bad > 0) -> (
          Candidatecandidate_wait_ack(pid, others, term, remaining_good, allowed_bad - 1)
        ) <> (
          Candidateidle(pid, others, term)
        ))
      )
    ))
    +
    (sum candidate : Pid . sum m : MessageData . (
      ((data((m)) == 0 && t((m)) == term)) -> (receiveMessage(pid, candidate, m) . 
        ((candidate == pid) -> (
          sendMessage(pid, candidate, MakeMessage(t((m)), 1))
          .
          Candidatecandidate_wait_ack(pid, others, term, remaining_good, allowed_bad)
        ) <> (
          sendMessage(pid, candidate, MakeMessage(term, 2))
          .
          Candidatecandidate_wait_ack(pid, others, term, remaining_good, allowed_bad)
        ))
      )
    ))
    +
    (sum candidate : Pid . sum m : MessageData . (
      ((data((m)) == 0 && t((m)) > term)) -> (receiveMessage(pid, candidate, m) . 
        ((candidate == pid) -> (
          sendMessage(pid, candidate, MakeMessage(t((m)), 1))
          .
          Candidatecandidate_wait_ack(pid, others, term, remaining_good, allowed_bad)
        ) <> (
          sendMessage(pid, candidate, MakeMessage(t((m)), 1))
          .
          Candidateidle(pid, others, t((m)))
        ))
      )
    ))
    +
    (sum candidate : Pid . sum m : MessageData . (
      ((data((m)) == 5 && t((m)) >= term)) -> (receiveMessage(pid, candidate, m) . 
        protocolDone
        .
        Candidateidle(pid, others, t((m)))
      )
    ))
    + (ALLOW_CRASH) -> crash(pid) . Candidatecandidate_wait_ackcrashed(pid, others, term, remaining_good, allowed_bad);

    Candidatecandidate_wait_ackcrashed(pid: Pid, others: List(Pid), term: Nat, remaining_good: Int, allowed_bad: Int) = 
      (sum server : Pid . sum m : MessageData . receiveMessage(pid, server, m)) . Candidatecandidate_wait_ackcrashed(pid, others, term, remaining_good, allowed_bad)
      + resume(pid) . Candidatecandidate_wait_ack(pid, others, term, remaining_good, allowed_bad)
  ;

  Candidateidle(pid: Pid, others: List(Pid), term: Nat) = 
    (sum candidate : Pid . sum m : MessageData . (
      ((data((m)) == 0 && t((m)) > term)) -> (receiveMessage(pid, candidate, m) . 
        sendMessage(pid, candidate, MakeMessage(t((m)), 1))
        .
        Candidateidle(pid, others, t((m)))
      )
    ))
    +
    (sum candidate : Pid . sum m : MessageData . (
      ((data((m)) == 0 && t((m)) == term)) -> (receiveMessage(pid, candidate, m) . 
        sendMessage(pid, candidate, MakeMessage(t((m)), 2))
        .
        Candidateidle(pid, others, term)
      )
    ))
    +
    (sum candidate : Pid . sum m : MessageData . (
      (t((m)) < term) -> (receiveMessage(pid, candidate, m) . 
        Candidateidle(pid, others, term)
      )
    ))
    +
    (sum candidate : Pid . sum m : MessageData . (
      ((data((m)) == 5 && t((m)) >= term)) -> (receiveMessage(pid, candidate, m) . 
        protocolDone
        .
        Candidateidle(pid, others, t((m)))
      )
    ))
    +
    (sum some_user : Pid . sum m : MessageData . (
      (((data((m)) == 1 || data((m)) == 2) && t((m)) == term)) -> (receiveMessage(pid, some_user, m) . 
        Candidateidle(pid, others, term)
      )
    ))
    + timeout(pid) . 
    broadcastMessages(pid, others, MakeMessage(term + 1, 0))
    .
    Candidatecandidate_wait_ack(pid, others, term + 1, ceil((# (others) / 2)), floor((# (others) / 2)))
    + (ALLOW_CRASH) -> crash(pid) . Candidateidlecrashed(pid, others, term);

    Candidateidlecrashed(pid: Pid, others: List(Pid), term: Nat) = 
      (sum server : Pid . sum m : MessageData . receiveMessage(pid, server, m)) . Candidateidlecrashed(pid, others, term)
      + resume(pid) . Candidateidle(pid, others, term)
  ;

  Candidateleader(pid: Pid, others: List(Pid), term: Nat) = 
    (sum candidate : Pid . sum m : MessageData . (
      (t((m)) < term) -> (receiveMessage(pid, candidate, m) . 
        Candidateleader(pid, others, term)
      )
    ))
    +
    (sum some_user : Pid . sum m : MessageData . (
      (((data((m)) == 1 || data((m)) == 2) && t((m)) == term)) -> (receiveMessage(pid, some_user, m) . 
        Candidateleader(pid, others, term)
      )
    ))
    +
    (sum candidate : Pid . sum m : MessageData . (
      ((data((m)) == 5 && t((m)) >= term)) -> (receiveMessage(pid, candidate, m) . 
        ((candidate == pid) -> (
          protocolDone
          .
          Candidateleader(pid, others, t((m)))
        ) <> (
          Candidateidle(pid, others, t((m)))
        ))
      )
    ))
    +
    (sum candidate : Pid . sum m : MessageData . (
      ((data((m)) == 0 && t((m)) > term)) -> (receiveMessage(pid, candidate, m) . 
        sendMessage(pid, candidate, MakeMessage(t((m)), 1))
        .
        Candidateidle(pid, others, t((m)))
      )
    ))
    +
    (sum candidate : Pid . sum m : MessageData . (
      ((data((m)) == 0 && t((m)) == term)) -> (receiveMessage(pid, candidate, m) . 
        sendMessage(pid, candidate, MakeMessage(t((m)), 2))
        .
        Candidateleader(pid, others, term)
      )
    ))
    + (ALLOW_CRASH) -> crash(pid) . Candidateleadercrashed(pid, others, term);

    Candidateleadercrashed(pid: Pid, others: List(Pid), term: Nat) = 
      (sum server : Pid . sum m : MessageData . receiveMessage(pid, server, m)) . Candidateleadercrashed(pid, others, term)
      + resume(pid) . Candidateleader(pid, others, term)
  ;
Network(msgs: FSet(Message)) =
  (sum sender : Pid, msg: MessageData . ((# msgs) < NETWORK_LIMIT) -> (
    (sum receiver : Pid .
      networkReceiveMessage(sender, receiver, msg) .
      Network(msgs = msgs + {Message(sender, receiver, msg)})
    )
    +
    (sum receivers: List(Pid) .
      networkBroadcastMessages(sender, receivers, msg) .
      Network(msgs = msgs + SplitBroadcastedMessages(sender, receivers, msg)))
   ))
   +
   (sum msg: Message . (msg in msgs) ->
     (networkSendMessage(receiverID(msg), senderID(msg), message(msg))
       + ((LOSSY_NETWORK) -> lose)
     ) . Network(msgs = msgs - {msg}))
   + ((# msgs) == 0) -> (emptyNetwork . Network());
init
  allow({outgoingMessage, incomingMessage, broadcast, lose, done, timeout, resume, crash, exposeLeader},
  comm({
    sendMessage|networkReceiveMessage -> outgoingMessage,
    networkSendMessage|receiveMessage -> incomingMessage,
    broadcastMessages|networkBroadcastMessages -> broadcast,
    protocolDone|protocolDone|protocolDone|protocolDone|protocolDone -> done
  },
    Candidate(Candidate_PID . 0, Candidate_PID) || Candidate(Candidate_PID . 1, Candidate_PID) || Candidate(Candidate_PID . 2, Candidate_PID) || Candidate(Candidate_PID . 3, Candidate_PID) || Candidate(Candidate_PID . 4, Candidate_PID) || Network({})
  )
);
