sort Pid = Nat;
sort MessageType = struct M(t: Nat, data: Nat);
sort Message = struct Message(senderID: Pid, receiverID: Pid, message: MessageType);

map LOSSY_NETWORK : Bool;
eqn LOSSY_NETWORK = false;

map NETWORK_LIMIT : Nat;
eqn NETWORK_LIMIT = 20;

map Candidate_PID : List(Pid);
eqn Candidate_PID = [1001, 1002, 1003, 1004, 1005];


map SplitBroadcastedMessages: Pid # List(Pid) # MessageType -> FSet(Message);
var v_sender: Pid;
   v_receivers: List(Pid);
    v_message: MessageType;
eqn SplitBroadcastedMessages(v_sender, v_receivers, v_message) =
    SplitBroadcastedMessagesHelper(v_sender, v_receivers, v_message, {});
map SplitBroadcastedMessagesHelper: Pid # List(Pid) # MessageType # FSet(Message) -> FSet(Message);
var v_sender: Pid;
    v_receivers: List(Pid);
    v_message: MessageType;
    v_msgs: FSet(Message);
eqn ((# v_receivers) == 0) -> SplitBroadcastedMessagesHelper(v_sender, v_receivers, v_message, v_msgs) = v_msgs;
    ((# v_receivers) > 0)  -> SplitBroadcastedMessagesHelper(v_sender, v_receivers, v_message, v_msgs) =
                     SplitBroadcastedMessagesHelper(v_sender, tail(v_receivers), v_message, v_msgs
                     + {Message(v_sender, head(v_receivers), v_message)} );


act
  sendMessage, receiveMessage, networkReceiveMessage, networkSendMessage, outgoingMessage, incomingMessage: Pid # Pid # MessageType;
  broadcastMessages, networkBroadcastMessages, broadcast: Pid # List(Pid) # MessageType;
  lose, done, emptyNetwork, protocolDone, timeout;
proc
  Candidate(pid: Pid, others: List(Pid)) = 
    Candidateidle(pid, others, 0)
  ;
  Candidatecandidate_wait_ack(pid: Pid, others: List(Pid), term: Nat, remaining_good: Int, allowed_bad: Int) = 
    (sum some_user : Pid . sum m : MessageType . (
      ((t(m) < term)) -> (receiveMessage(pid, some_user, m) . 
        Candidatecandidate_wait_ack(pid, others, term, remaining_good, allowed_bad)
      )
    ))
    +
    (sum some_user : Pid . sum m : MessageType . (
      ((data(m) ==1 && remaining_good > 1 && t(m) == term)) -> (receiveMessage(pid, some_user, m) . 
        Candidatecandidate_wait_ack(pid, others, term, remaining_good - 1, allowed_bad)
      )
    ))
    +
    (sum some_user : Pid . sum m : MessageType . (
      ((data(m) ==1 && remaining_good == 1 && t(m) == term)) -> (receiveMessage(pid, some_user, m) . 
        broadcastMessages(pid, others, M(term, 5))
        .
        Candidateidle(pid, others, term)
      )
    ))
    +
    (sum some_user : Pid . sum m : MessageType . (
      ((data(m) ==2 && allowed_bad > 0) && t(m) == term) -> (receiveMessage(pid, some_user, m) . 
        Candidatecandidate_wait_ack(pid, others, term, remaining_good, allowed_bad - 1)
      )
    ))
    +
    (sum some_user : Pid . sum m : MessageType . (
      ((data(m) ==2 && allowed_bad == 0) && t(m) == term) -> (receiveMessage(pid, some_user, m) . 
        Candidateidle(pid, others, term)
      )
    ))
    +
    (sum candidate : Pid . sum m : MessageType . (
      (data(m) ==0 && pid != candidate && t(m) == term) -> (receiveMessage(pid, candidate, m) . 
        sendMessage(pid, candidate, M(t(m), 2))
        .
        Candidatecandidate_wait_ack(pid, others, term, remaining_good, allowed_bad)
      )
    ))
    +
    (sum candidate : Pid . sum m : MessageType . (
      (data(m) ==0 && pid != candidate && t(m) > term) -> (receiveMessage(pid, candidate, m) . 
        sendMessage(pid, candidate, M(t(m), 1))
        .
        Candidateidle(pid, others, t(m))
      )
    ))
    +
    (sum candidate : Pid . sum m : MessageType . (
      (data(m) == 0 && pid == candidate) -> (receiveMessage(pid, candidate, m) . 
        sendMessage(pid, candidate, M(t(m), 1))
        .
        Candidatecandidate_wait_ack(pid, others, term, remaining_good, allowed_bad)
      )
    ))
    +
    (sum candidate : Pid . sum m : MessageType . (
      (data(m) == 5 && t(m) >= term) -> (receiveMessage(pid, candidate, m) . 
        protocolDone
      )
    ))
  ;

  Candidateidle(pid: Pid, others: List(Pid), term: Nat) = 
    (sum candidate : Pid . sum m : MessageType . (
      (data(m) == 0 && t(m) > term) -> (receiveMessage(pid, candidate, m) . 
        sendMessage(pid, candidate, M(t(m), 1))
        .
        Candidateidle(pid, others, t(m))
      )
    ))
    +
    (sum candidate : Pid . sum m : MessageType . (
      (data(m) == 0 && t(m) == term) -> (receiveMessage(pid, candidate, m) . 
        sendMessage(pid, candidate, M(term, 2))
        .
        Candidateidle(pid, others, term)
      )
    ))
    +
    (sum candidate : Pid . sum m : MessageType . (
      (t(m) < term) -> (receiveMessage(pid, candidate, m) . 
        Candidateidle(pid, others, term)
      )
    ))
    +
    (sum candidate : Pid . sum m : MessageType . (
      (data(m) == 5 && t(m) >= term) -> (receiveMessage(pid, candidate, m) . 
        protocolDone
      )
    ))
    +
    timeout . broadcastMessages(pid, others, M(term+1, 0))
    .
    Candidatecandidate_wait_ack(pid, others, term + 1, ceil((# (others) / 2)), floor((# (others) / 2)))
  ;
Network(msgs: FSet(Message)) =
  (sum sender : Pid, msg: MessageType . ((# msgs) < NETWORK_LIMIT) -> (
    (sum receiver : Pid .
      networkReceiveMessage(sender, receiver, msg) .
      Network(msgs = msgs + {Message(sender, receiver, msg)})
    )
    +
    (sum receivers: List(Pid) .
      networkBroadcastMessages(sender, receivers, msg) .
      Network(msgs = msgs + SplitBroadcastedMessages(sender, receivers, msg)))
   ))
   +
   (sum msg: Message . (msg in msgs) ->
     (networkSendMessage(receiverID(msg), senderID(msg), message(msg))
       + ((LOSSY_NETWORK) -> lose)
     ) . Network(msgs = msgs - {msg}))
   + ((# msgs) == 0) -> (emptyNetwork . Network());
init
  allow({outgoingMessage, incomingMessage, broadcast, lose, done, timeout},
  comm({
    sendMessage|networkReceiveMessage -> outgoingMessage,
    networkSendMessage|receiveMessage -> incomingMessage,
    broadcastMessages|networkBroadcastMessages -> broadcast,
    protocolDone|protocolDone|protocolDone|protocolDone|protocolDone -> done
  },
    Candidate(Candidate_PID . 0, Candidate_PID) || 
    Candidate(Candidate_PID . 1, Candidate_PID) || 
    Candidate(Candidate_PID . 2, Candidate_PID) ||
    Candidate(Candidate_PID . 3, Candidate_PID) ||
    Candidate(Candidate_PID . 4, Candidate_PID) ||  Network({})
  )
);
