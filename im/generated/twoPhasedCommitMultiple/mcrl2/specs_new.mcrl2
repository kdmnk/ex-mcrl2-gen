sort Pid = Nat;
sort MessageType = Nat;
sort Message = struct Message(senderID: Pid, receiverID: Pid, message: MessageType);
sort State = struct idle | wait_for_server | receive_messages | receive_acks;

map LOSSY_NETWORK : Bool;
eqn LOSSY_NETWORK = false;

map User_PID : List(Pid);
eqn User_PID = [1001, 1002, 1003];
map Mach_PID : Pid;
eqn Mach_PID = 1000;

map SplitBroadcastedMessages: Pid # List(Pid) # MessageType -> FSet(Message);
var v_sender: Pid;
   v_receivers: List(Pid);
    v_message: MessageType;
eqn SplitBroadcastedMessages(v_sender, v_receivers, v_message) =
    SplitBroadcastedMessagesHelper(v_sender, v_receivers, v_message, {});
map SplitBroadcastedMessagesHelper: Pid # List(Pid) # MessageType # FSet(Message) -> FSet(Message);
var v_sender: Pid;
    v_receivers: List(Pid);
    v_message: MessageType;
    v_msgs: FSet(Message);
eqn ((# v_receivers) == 0) -> SplitBroadcastedMessagesHelper(v_sender, v_receivers, v_message, v_msgs) = v_msgs;
    ((# v_receivers) > 0)  -> SplitBroadcastedMessagesHelper(v_sender, v_receivers, v_message, v_msgs) =
                     SplitBroadcastedMessagesHelper(v_sender, tail(v_receivers), v_message, v_msgs
                     + {Message(v_sender, head(v_receivers), v_message)} );

act
  sendMessage, receiveMessage, networkReceiveMessage, networkSendMessage, outgoingMessage, incomingMessage: Pid # Pid # MessageType;
  broadcastMessages, networkBroadcastMessages, broadcast: Pid # List(Pid) # MessageType;
  lose, done, protocolDone, emptyNetwork;

proc
  User(pid: Pid) = UserLoop(pid, idle);

  UserLoop(pid: Pid, state: State) =
    (sum server : Pid . sum m : MessageType . (
      (state == idle && m == 0) -> (receiveMessage(pid, server, m) . 
          (tau .
          sendMessage(pid, server, 1)
          + tau .
          sendMessage(pid, server, 2)
          )
          .
          UserLoop(pid, wait_for_server)
      )
      +
      (state == wait_for_server && m == 3) -> (receiveMessage(pid, server, m) . 
        sendMessage(pid, server, 5)
        . UserLoop(pid, idle)
      ) +
      (state == wait_for_server && m == 5) -> (receiveMessage(pid, server, m) . 
        sendMessage(pid, server, 5)
        . UserLoop(pid, idle)
      )
    ));

  Mach(pid: Pid, users: List(Pid)) = 
    broadcastMessages(pid, users, 0)
    .
    MachLoop(pid, receive_messages, users, [], # (users))
  ;
  MachLoop(pid: Pid, state: State, users: List(Pid), msgs: List(Nat), remaining: Int) = 
    (sum server : Pid . sum m : MessageType . (
      (state == receive_messages && (m == 1 || m ==2) && remaining > 1) -> (receiveMessage(pid, server, m) . 
        MachLoop(pid, receive_messages, users, (m |> msgs), remaining - 1)
      ) 
      +
      (state == receive_messages && (m == 1 || m == 2) && remaining == 1) -> (receiveMessage(pid, server, m) . 
        ((1 in (m |> msgs)) -> (
            broadcastMessages(pid, users, 3)
            .
            MachLoop(pid, receive_acks, users, [], # users)
          )
        ) . (!(1 in (m |> msgs)) -> (
            broadcastMessages(pid, users, 4)
            .
            MachLoop(pid, receive_acks, users, [], # users)
          )
        )
      )
      +
      (state == receive_acks && m == 5 && remaining > 1) -> (receiveMessage(pid, server, m) . 
        MachLoop(pid, receive_acks, users, [], remaining - 1)
      ) 
      +
      (state == receive_acks && m == 5 && remaining == 1) -> (receiveMessage(pid, server, m) . 
        protocolDone
      )
    ));
  
Network(msgs: FSet(Message)) =
  (sum sender : Pid, msg: MessageType . (
    (sum receiver : Pid .
      networkReceiveMessage(sender, receiver, msg) .
      Network(msgs = msgs + {Message(sender, receiver, msg)})
    )
    +
    (sum receivers: List(Pid) .
      networkBroadcastMessages(sender, receivers, msg) .
      Network(msgs = msgs + SplitBroadcastedMessages(sender, receivers, msg)))
   ))
   +
   (sum msg: Message . (msg in msgs) ->
     (networkSendMessage(receiverID(msg), senderID(msg), message(msg))
       + ((LOSSY_NETWORK) -> lose)
     ) . Network(msgs = msgs - {msg}))
    + ((# msgs) == 0) -> (emptyNetwork . Network());
init
  allow({outgoingMessage, incomingMessage, broadcast, lose, done},
  comm({
    sendMessage|networkReceiveMessage -> outgoingMessage,
    networkSendMessage|receiveMessage -> incomingMessage,
    broadcastMessages|networkBroadcastMessages -> broadcast,
    protocolDone|emptyNetwork -> done
  },
    User(User_PID . 0) || User(User_PID . 1) || User(User_PID . 2) || Mach(Mach_PID, User_PID) || Network({})
  )
);
