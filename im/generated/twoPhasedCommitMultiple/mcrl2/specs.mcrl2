sort Pid = Nat;
sort MessageData = Nat;
sort Message = struct Message(senderID: Pid, receiverID: Pid, message: MessageData);

map LOSSY_NETWORK : Bool;
eqn LOSSY_NETWORK = false;

map ALLOW_CRASH : Bool;
eqn ALLOW_CRASH = false;

map NETWORK_LIMIT : Nat;
eqn NETWORK_LIMIT = 20;

map MakeMessage: Nat -> MessageData;
var msg: Nat;
eqn MakeMessage(msg) = msg;

map User_PID : List(Pid);
eqn User_PID = [1001, 1002, 1003];
map Mach_PID : Pid;
eqn Mach_PID = 2000;

map SplitBroadcastedMessages: Pid # List(Pid) # MessageData -> FSet(Message);
var v_sender: Pid;
   v_receivers: List(Pid);
    v_message: MessageData;
eqn SplitBroadcastedMessages(v_sender, v_receivers, v_message) =
    SplitBroadcastedMessagesHelper(v_sender, v_receivers, v_message, {});
map SplitBroadcastedMessagesHelper: Pid # List(Pid) # MessageData # FSet(Message) -> FSet(Message);
var v_sender: Pid;
    v_receivers: List(Pid);
    v_message: MessageData;
    v_msgs: FSet(Message);
eqn ((# v_receivers) == 0) -> SplitBroadcastedMessagesHelper(v_sender, v_receivers, v_message, v_msgs) = v_msgs;
    ((# v_receivers) > 0)  -> SplitBroadcastedMessagesHelper(v_sender, v_receivers, v_message, v_msgs) =
                     SplitBroadcastedMessagesHelper(v_sender, tail(v_receivers), v_message, v_msgs
                     + {Message(v_sender, head(v_receivers), v_message)} );


act
  sendMessage, receiveMessage, networkReceiveMessage, networkSendMessage, outgoingMessage, incomingMessage: Pid # Pid # MessageData;
  broadcastMessages, networkBroadcastMessages, broadcast: Pid # List(Pid) # MessageData;
  lose, done, emptyNetwork, protocolDone;
  resume, crash, timeout: Pid;
  
proc
  User(pid: Pid) = 
    Useridle(pid)
  ;
  Useridle(pid: Pid) = 
    (sum server : Pid . sum m : MessageData . (
      (m == 0) -> (receiveMessage(pid, server, m) . 
        (sum answer : Nat . (answer in [1, 2]) -> tau . (
          sendMessage(pid, server, MakeMessage(answer))
        ))
        .
        Userwait_for_server(pid)
      )
    ))
    + (ALLOW_CRASH) -> crash(pid) . Useridlecrashed(pid);

    Useridlecrashed(pid: Pid) = 
      (sum server : Pid . sum m : MessageData . receiveMessage(pid, server, m)) . Useridlecrashed(pid)
      + resume(pid) . Useridle(pid)
  ;

  Userwait_for_server(pid: Pid) = 
    (sum server : Pid . sum m : MessageData . (
      (m == 3) -> (receiveMessage(pid, server, m) . 
        sendMessage(pid, server, MakeMessage(5))
      )
    ))
    +
    (sum server : Pid . sum m : MessageData . (
      (m == 4) -> (receiveMessage(pid, server, m) . 
        sendMessage(pid, server, MakeMessage(5))
      )
    ))
    + (ALLOW_CRASH) -> crash(pid) . Userwait_for_servercrashed(pid);

    Userwait_for_servercrashed(pid: Pid) = 
      (sum server : Pid . sum m : MessageData . receiveMessage(pid, server, m)) . Userwait_for_servercrashed(pid)
      + resume(pid) . Userwait_for_server(pid)
  ;
  Mach(pid: Pid, users: List(Pid)) = 
    broadcastMessages(pid, users, MakeMessage(0))
    .
    Machreceive_messages(pid, users, [], # (users))
  ;
  Machreceive_messages(pid: Pid, users: List(Pid), msgs: List(Nat), remaining: Int) = 
    (sum some_user : Pid . sum m : MessageData . (
      (((m == 1 || m == 2) && remaining > 1)) -> (receiveMessage(pid, some_user, m) . 
        Machreceive_messages(pid, users, (m |> msgs), remaining - 1)
      )
    ))
    +
    (sum some_user : Pid . sum m : MessageData . (
      (((m == 1 || m == 2) && remaining == 1)) -> (receiveMessage(pid, some_user, m) . 
        ((1 in (m |> msgs)) -> (
          broadcastMessages(pid, users, MakeMessage(3))
          .
          Machreceive_acks(pid, users, # (users))
        ) <> (
          broadcastMessages(pid, users, MakeMessage(4))
          .
          Machreceive_acks(pid, users, # (users))
        ))
      )
    ))
    + (ALLOW_CRASH) -> crash(pid) . Machreceive_messagescrashed(pid, users, msgs, remaining);

    Machreceive_messagescrashed(pid: Pid, users: List(Pid), msgs: List(Nat), remaining: Int) = 
      (sum server : Pid . sum m : MessageData . receiveMessage(pid, server, m)) . Machreceive_messagescrashed(pid, users, msgs, remaining)
      + resume(pid) . Machreceive_messages(pid, users, msgs, remaining)
  ;

  Machreceive_acks(pid: Pid, users: List(Pid), remaining: Int) = 
    (sum some_user : Pid . sum m : MessageData . (
      ((m == 5 && remaining > 1)) -> (receiveMessage(pid, some_user, m) . 
        Machreceive_acks(pid, users, remaining - 1)
      )
    ))
    +
    (sum some_user : Pid . sum m : MessageData . (
      ((m == 5 && remaining == 1)) -> (receiveMessage(pid, some_user, m) . 
        protocolDone
      )
    ))
    + (ALLOW_CRASH) -> crash(pid) . Machreceive_ackscrashed(pid, users, remaining);

    Machreceive_ackscrashed(pid: Pid, users: List(Pid), remaining: Int) = 
      (sum server : Pid . sum m : MessageData . receiveMessage(pid, server, m)) . Machreceive_ackscrashed(pid, users, remaining)
      + resume(pid) . Machreceive_acks(pid, users, remaining)
  ;
Network(msgs: FSet(Message)) =
  (sum sender : Pid, msg: MessageData . ((# msgs) < NETWORK_LIMIT) -> (
    (sum receiver : Pid .
      networkReceiveMessage(sender, receiver, msg) .
      Network(msgs = msgs + {Message(sender, receiver, msg)})
    )
    +
    (sum receivers: List(Pid) .
      networkBroadcastMessages(sender, receivers, msg) .
      Network(msgs = msgs + SplitBroadcastedMessages(sender, receivers, msg)))
   ))
   +
   (sum msg: Message . (msg in msgs) ->
     (networkSendMessage(receiverID(msg), senderID(msg), message(msg))
       + ((LOSSY_NETWORK) -> lose)
     ) . Network(msgs = msgs - {msg}))
   + ((# msgs) == 0) -> (emptyNetwork . Network());
init
  allow({outgoingMessage, incomingMessage, broadcast, lose, done, timeout, resume, crash},
  comm({
    sendMessage|networkReceiveMessage -> outgoingMessage,
    networkSendMessage|receiveMessage -> incomingMessage,
    broadcastMessages|networkBroadcastMessages -> broadcast,
    protocolDone|emptyNetwork -> done
  },
    User(User_PID . 0) || User(User_PID . 1) || User(User_PID . 2) || Mach(Mach_PID, User_PID) || Network({})
  )
);
