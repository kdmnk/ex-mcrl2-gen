sort MessageType = Nat;
sort Pid = Nat;
sort Message = struct Message(senderID: Pid, receiverID: Pid, message: MessageType);
act
 sendMessage, receiveMessage, networkReceiveMessage, networkSendMessage, outgoingMessage, incomingMessage: Nat # Nat # MessageType;
proc
 User1(pid: Pid) = 
  sum server : Pid . sum m : MessageType . (m == 0) -> receiveMessage(pid, server, m) . 
    tau .
    sendMessage(pid, server, 1)
    + tau .
    sendMessage(pid, server, 2)
  +
  sum server : Pid . sum m : MessageType . (m == 3) -> receiveMessage(pid, server, m) . 
   sendMessage(pid, server, 4)
  +
  sum server : Pid . sum m : MessageType . (m == 5) -> receiveMessage(pid, server, m) . 
   sendMessage(pid, server, 4)
  . User1();
 User2(pid: Pid) = 
  sum server : Pid . sum m : MessageType . (m == 0) -> receiveMessage(pid, server, m) . 
    tau .
    sendMessage(pid, server, 1)
    + tau .
    sendMessage(pid, server, 2)
  +
  sum server : Pid . sum m : MessageType . (m == 3) -> receiveMessage(pid, server, m) . 
   sendMessage(pid, server, 4)
  +
  sum server : Pid . sum m : MessageType . (m == 5) -> receiveMessage(pid, server, m) . 
   sendMessage(pid, server, 4)
  . User2();
 Mach(pid: Pid, user1: Pid, user2: Pid) = 
  sendMessage(pid, user1, 0)
  .
  sendMessage(pid, user2, 0)
  .
  sum some_user : Pid . sum m : MessageType . (m == 1) -> receiveMessage(pid, some_user, m) . 
   sendMessage(pid, user1, 3)
   .
   sendMessage(pid, user2, 3)
  +
  sum some_user : Pid . sum m : MessageType . (m == 2) -> receiveMessage(pid, some_user, m) . 
   sendMessage(pid, user1, 5)
   .
   sendMessage(pid, user2, 5)
  . Mach();
 Network(msgs: FSet(Message)) =
  sum sender : Pid,  receiver : Pid, msg: MessageType . networkReceiveMessage(sender, receiver, msg)
  . Network(msgs = msgs + {Message(sender, receiver, msg)})
  +
  sum msg: Message . (msg in msgs) -> networkSendMessage(receiverID(msg), senderID(msg), message(msg))
  . Network(msgs = msgs - {msg});
init
 allow({outgoingMessage, incomingMessage},
  comm({sendMessage|networkReceiveMessage -> outgoingMessage, networkSendMessage|receiveMessage -> incomingMessage},
  User1(1968) || User2(3579) || Mach(2175, 1968, 3579) || Network({})
));
