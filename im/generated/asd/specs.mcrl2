sort MessageType = Nat;
sort Pid = Nat;
sort Message = struct Message(senderID: Pid, receiverID: Pid, message: MessageType);
act
  sendMessage, receiveMessage, networkReceiveMessage, networkSendMessage, outgoingMessage, incomingMessage: Nat # Nat # MessageType;
proc
  User1(pid: Pid) = 
    (sum server : Pid . sum m : MessageType . (
      (m == 0) -> (receiveMessage(pid, server, m) . 
          (tau .
          sendMessage(pid, server, 1)
          + tau .
          sendMessage(pid, server, 2)
          )
      ) +
      (m == 3) -> (receiveMessage(pid, server, m) . 
        sendMessage(pid, server, 4)
      ) +
      (m == 5) -> (receiveMessage(pid, server, m) . 
        sendMessage(pid, server, 4)
      )
    ))
    .
    User1(pid)
  ;
  User2(pid: Pid) = 
    (sum server : Pid . sum m : MessageType . (
      (m == 0) -> (receiveMessage(pid, server, m) . 
          (tau .
          sendMessage(pid, server, 1)
          + tau .
          sendMessage(pid, server, 2)
          )
      ) +
      (m == 3) -> (receiveMessage(pid, server, m) . 
        sendMessage(pid, server, 4)
      ) +
      (m == 5) -> (receiveMessage(pid, server, m) . 
        sendMessage(pid, server, 4)
      )
    ))
    .
    User2(pid)
  ;
  Mach(pid: Pid, user1: Pid, user2: Pid) = 
    sendMessage(pid, user1, 0)
    .
    sendMessage(pid, user2, 0)
    .
    receiveMessages(pid, user1, user2, [], 2)
  ;
  receiveMessages(pid: Pid, user1: Pid, user2: Pid, msgs: List(Nat), remaining: Int) = 
    (remaining == 0) -> (
      processAck(pid, user1, user2, msgs)
    )
    <> (
      receiveMsg(pid, user1, user2, msgs, remaining)
    )
  ;
  receiveMsg(pid: Pid, user1: Pid, user2: Pid, msgs: List(Nat), remaining: Int) = 
    (sum some_user : Pid . sum m : MessageType . (
      (m == 1 || m == 2) -> (receiveMessage(pid, some_user, m) . 
        receiveMessages(pid, user1, user2, m |> msgs, remaining - 1)
      )
    ))
  ;
  processAck(pid: Pid, user1: Pid, user2: Pid, msgs: List(Nat)) = 
    (2 in msgs) -> (
      sendMessage(pid, user1, 5)
      .
      sendMessage(pid, user2, 5)
    )
    <> (
      sendMessage(pid, user1, 3)
      .
      sendMessage(pid, user2, 3)
    )
    .
    (sum some_user : Pid . sum m : MessageType . (
      (m == 4) -> (receiveMessage(pid, some_user, m) . 
        tau
      )
    ))
    .
    (sum some_user : Pid . sum m : MessageType . (
      (m == 4) -> (receiveMessage(pid, some_user, m) . 
        tau
      )
    ))
    .
    Mach(pid, user1, user2)
  ;
  Network(msgs: FSet(Message)) =
    sum sender : Pid,  receiver : Pid, msg: MessageType . networkReceiveMessage(sender, receiver, msg)
    . Network(msgs = msgs + {Message(sender, receiver, msg)})
    +
    sum msg: Message . (msg in msgs) -> networkSendMessage(receiverID(msg), senderID(msg), message(msg))
    . Network(msgs = msgs - {msg});
init
  allow({outgoingMessage, incomingMessage},
    comm({sendMessage|networkReceiveMessage -> outgoingMessage, networkSendMessage|receiveMessage -> incomingMessage},
    User1(7820) || User2(1482) || Mach(4743, 7820, 1482) || Network({})
));
