
sort Pid = Bool;
sort MessageType = Bool;
sort Message = struct Message(senderID: Pid, receiverID: Pid, message: MessageType);

map LOSSY_NETWORK : Bool;
eqn LOSSY_NETWORK = false;

map SplitBroadcastedMessages: Pid # List(Pid) # MessageType -> FSet(Message);
var v_sender: Pid;
   v_receivers: List(Pid);
    v_message: MessageType;
eqn SplitBroadcastedMessages(v_sender, v_receivers, v_message) =
    SplitBroadcastedMessagesHelper(v_sender, v_receivers, v_message, {});
map SplitBroadcastedMessagesHelper: Pid # List(Pid) # MessageType # FSet(Message) -> FSet(Message);
var v_sender: Pid;
    v_receivers: List(Pid);
    v_message: MessageType;
    v_msgs: FSet(Message);
eqn ((# v_receivers) == 0) -> SplitBroadcastedMessagesHelper(v_sender, v_receivers, v_message, v_msgs) = v_msgs;
    ((# v_receivers) > 0)  -> SplitBroadcastedMessagesHelper(v_sender, v_receivers, v_message, v_msgs) =
                     SplitBroadcastedMessagesHelper(v_sender, tail(v_receivers), v_message, v_msgs
                     + {Message(v_sender, head(v_receivers), v_message)} );

act
  sendMessage, receiveMessage, networkReceiveMessage, networkSendMessage, outgoingMessage, incomingMessage: Pid # Pid # MessageType;
  broadcastMessages, networkBroadcastMessages, broadcast: Pid # List(Pid) # MessageType;
  lose;
  exposeMsgs: FSet(Message);

proc
    Broadcaster = 
        (sum p1: Pid, m : MessageType . 
            broadcastMessages(p1, [true, false], m)
        )
        . Broadcaster();
    Sender = 
        (sum p1, p2 : Pid . sum m : MessageType . 
            sendMessage(p1, p2, m)
        )
        . Sender();
    Receiver = 
        (sum p1, p2 : Pid . sum m : MessageType . 
            receiveMessage(p1, p2, m)
        ) . Receiver();
    Network(msgs: FSet(Message)) =
        (sum sender : Pid, msg: MessageType . (
            (sum receiver : Pid .
                !(Message(sender, receiver, msg) in msgs) -> (
                networkReceiveMessage(sender, receiver, msg) .
                Network(msgs = msgs + {Message(sender, receiver, msg)}))
            )
            +
            (sum receivers: List(Pid) .
                networkBroadcastMessages(sender, receivers, msg) .
                Network(msgs = msgs + SplitBroadcastedMessages(sender, receivers, msg)))
            ))
        +
        (sum msg: Message . (msg in msgs) ->
            (networkSendMessage(receiverID(msg), senderID(msg), message(msg))
            + ((LOSSY_NETWORK) -> lose)
            ) . Network(msgs = msgs - {msg}))
        + 
        (exposeMsgs(msgs) . Network());
init
  allow({outgoingMessage, incomingMessage, broadcast, lose, exposeMsgs},
  comm({
    sendMessage|networkReceiveMessage -> outgoingMessage,
    networkSendMessage|receiveMessage -> incomingMessage,
    broadcastMessages|networkBroadcastMessages -> broadcast
  },
    Sender() || Broadcaster() || Receiver() || Network({})
  )
);